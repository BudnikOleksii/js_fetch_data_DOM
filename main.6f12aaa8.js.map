{"version":3,"sources":["scripts/requests.js","scripts/main.js"],"names":["BASE_URL","ENDPOINTS","phones","phoneById","id","request","url","fetch","then","response","ok","setTimeout","Promise","reject","Error","status","statusText","json","module","exports","require","body","document","querySelector","list","createElement","getPhoneDetails","idArr","all","map","getPhones","data","forEach","phone","insertAdjacentHTML","name","ids","phonesWithDetails","i","Object","assign","console","log","append"],"mappings":";AACA,aAEA,IAAMA,EAAW,4DACXC,EAAY,CAChBC,OAAQ,eACRC,UAAW,SAACC,GAAkBA,MAAAA,WAAAA,OAAAA,EAAnB,WAGPC,EAAU,SAACC,GACRC,OAAAA,MAASP,GAAAA,OAAAA,GAAWM,OAAAA,IACxBE,KAAK,SAAAC,GAOGA,OANFA,EAASC,IACZC,WAAW,WAAMC,OAAAA,QAAQC,OACvB,IAAIC,MAASL,GAAAA,OAAAA,EAASM,OAAYN,OAAAA,OAAAA,EAASO,eAC1C,KAGEP,EAASQ,UAItBC,OAAOC,QAAU,CACflB,UAAAA,EAAWI,QAAAA;;ACvBb,aAE+Be,IAAAA,EAAAA,QAAQ,cAA/BnB,EAAAA,EAAAA,UAAWI,EAAAA,EAAAA,QACbgB,EAAOC,SAASC,cAAc,QAC9BC,EAAOF,SAASG,cAAc,MAE9BC,EAAkB,SAACC,GAChBf,OAAAA,QAAQgB,IAAID,EAAME,IAAI,SAAAzB,GAAMC,OAAAA,EAAQJ,EAAUE,UAAUC,QAG3D0B,EAAY,WAChBzB,EAAQJ,EAAUC,QACfM,KAAK,SAACuB,GACLA,EAAKC,QAAQ,SAAAC,GACXT,EAAKU,mBAAmB,YAAoBD,OAAAA,OAAAA,EAAME,KAAlD,YAGIC,IAAAA,EAAML,EAAKF,IAAI,SAAAI,GAASA,OAAAA,EAAM7B,KAEpCsB,EAAgBU,GACb5B,KAAK,SAAAC,GACE4B,IAAAA,EAAoBN,EAAKF,IAAI,SAACI,EAAOK,GAClCC,OAAAA,OAAOC,OAAOP,EAAOxB,EAAS6B,MAIzCG,QAAQC,IAAIL,KAGdhB,EAAKsB,OAAOnB,MAIlBM","file":"main.6f12aaa8.js","sourceRoot":"..\\src","sourcesContent":["\n'use strict';\n\nconst BASE_URL = 'https://mate-academy.github.io/phone-catalogue-static/api';\nconst ENDPOINTS = {\n  phones: '/phones.json',\n  phoneById: (id) => `/phones/${id}.json`,\n};\n\nconst request = (url) => {\n  return fetch(`${BASE_URL}${url}`)\n    .then(response => {\n      if (!response.ok) {\n        setTimeout(() => Promise.reject(\n          new Error(`${response.status} - ${response.statusText}`)\n        ), 5000);\n      }\n\n      return response.json();\n    });\n};\n\nmodule.exports = {\n  ENDPOINTS, request,\n};\n","'use strict';\n\nconst { ENDPOINTS, request } = require('./requests');\nconst body = document.querySelector('body');\nconst list = document.createElement('ul');\n\nconst getPhoneDetails = (idArr) => {\n  return Promise.all(idArr.map(id => request(ENDPOINTS.phoneById(id))));\n};\n\nconst getPhones = () => {\n  request(ENDPOINTS.phones)\n    .then((data) => {\n      data.forEach(phone => {\n        list.insertAdjacentHTML('beforeend', `<li>${phone.name}</li>`);\n      });\n\n      const ids = data.map(phone => phone.id);\n\n      getPhoneDetails(ids)\n        .then(response => {\n          const phonesWithDetails = data.map((phone, i) => {\n            return Object.assign(phone, response[i]);\n          });\n\n          // eslint-disable-next-line\n        console.log(phonesWithDetails);\n        });\n\n      body.append(list);\n    });\n};\n\ngetPhones();\n"]}